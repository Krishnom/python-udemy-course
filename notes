Useful Operators
1. range()
    range(10) --> gives you first 10 numbers
    range(3,10) --> gives you number from 3 to 9 (excluding 10)
    range(1,10,2) --> gives you first 10 numbers with step size 2. i.e. 1,3,5,7,9

2. enumerate() -> gives you list of tuples
    e.g. enumerate('hello world') returns you {(0,'h'), (1,'e') ....}
    example code
        for index, item in enumerate('hello world'):
            print(item.__str__() + " is at " + index.__str__())

        output:::
            h is at 0
            e is at 1
            l is at 2
3. zip() --> zip together lists and generate tuple pairs. e.g.
              list1 = [1,2,3]
              list2 = [a,b,c]
              zipped = zip(list1, list2)
              for item in zipped:
                print (item)

              output
                [(1,'a'),(2,'b'),(3,'c')]

4. build ins operator for list : in, max, min, shuffle
        example
            1 in [1,2,3] return True
            max([1,2,3]) return 3
            min([1,2,3]) return 1
            shuffle([1,2,3,4]) returns random sequence list

5. randint(1,10) -> returns random integer in 1,10 range
6. input("message") -> ask for user input
7. converting one type to another
    use int(), float(), str() etc.


8. shorthands to append to a list(list comprehension)
    tidy way
        mylist = []
        for letter in 'words':
            mylist.append(letter)

        outputs -> mylist = ['w','o','r','d','s']

    shorthand for above code is
        mylist = [letter  for letter in 'words' ]

        outputs -> mylist = ['w','o','r','d','s']

    another shorthand using numbers
        mylist = [num for num in range(1,11)]

        outputs -> mylist = ['1','2','3','4','5' ....]

        mylist = [num**2 for num in range(1,11)] --> list of square of number from 1 - 10

        outputs -> mylist = ['1','4','9','16','25' ....]

        below returns a list of even numbers
        args=(1,2,3,4,5,6,7,8,9)
        [num for num in args if num % 2 == 0]


       CAUTIONS: Use this only if the for statement is very simple. avoid it for loops with multiple statments.

*args and **kwargs
    1. *args ( or *<anyname>) is used to pass an arbitrary tuple as argument to function
        for example, below code without *args
            def myfunc(a,b,c=0,d=0,....):
                print(sum(a+b+c+d....) # and everytime you need more arg you update defination and this statement
            myfunc(1,2,3,4)
            myfunc(1,2)
        is similar to below code using args
            def myfunc(*args):
                print(sum(args))
            myfunc(1)
            myfunc(1, 2)
             ....

    2. **kwargs (or **<anyname>) i.e. keyword args,  is used to pass an arbitrary dictionary to function
        for e.g.
           def myfunc(**kwargs):
            if 'fruit' in kwargs:
                print("i like {}".format(kwargs['fruit'])
            else
                print("I am sad that you didn't brought fruits")


Reverse a list
    list = [1,2,3,4,5,6]
    reverse_list = list[::-1]

convert list to string
    list = [1,2,3,4,5]
    string_list = "".join(list)


pylint --> tool for getting your code quality report


--------------------------------------------------------------------------------------------
Map/Reduce/Filter/Lambda
---- Returns list of word length in phrase
        phrase = 'How long are the words in this phrase'
        list(map(len ,phrase.split()))
---- Return number representation of list of digits
        digits = [3,4,3,2,1]
        reduce(lambda x,y: x*10 + y, digits)
---- Return the words from a list of words which start with a target letter
     words = ['hello','are','cat','dog','ham','hi','go','to','heart']
     list(filter(lambda word: word[0] == letter, word_list))

--------------------------------------------------------------------------------------------
Advance number formats
Integer to Hexadecimal
    hex(int_num)
Integer to Binary
    bin(int_num)

Round a decimal digit
    round(5.2222) --> 5
    round(5.51) --> 6


--------------------------------------------------------------------------------------------
Sets
new_set = set()


set1 = {1,2,3,4,5,6}
set2 = {2,3,4,5,6}

get element in set1 that are not in set2
    set1.difference(set2)

Find all elements that are in either set: (all items in one set that is not in another)
    set1.difference(set2).union(set2.difference(set1))

creating dictionary using dictionary comprehension
set = {num: num**3 for num in range(5)}
print(set)
{0: 0, 1: 1, 2: 8, 3: 27, 4: 64}


--------------------------------------------------------------------------------------------
formatting integer to 14 digit by padding with 0s
print("{:0>14}".format(int(get_bin(num))))      